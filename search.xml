<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初识爬虫</title>
      <link href="2021/032316107.html"/>
      <url>2021/032316107.html</url>
      
        <content type="html"><![CDATA[<p>网络爬虫（又称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。<br><em>摘自百度百科</em></p><h2 id="了解爬虫"><a href="#了解爬虫" class="headerlink" title="了解爬虫"></a>了解爬虫</h2><h3 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h3><p>所谓”爬虫”通俗的说就是一个探测器，模拟人的行为去各个网站溜达，看到数据就背回来，在网上爬来爬去。<br>①网站发展以前，访问网站都是通过域名访问，网站有什么就看什么？<br>②网站的数量呈现爆炸式的增长，则由被动浏览变成主动查询。（只想看我们想看的）<br>③搜索引擎的产生，查询到对应的目标网站，怎么获取所有数据？——爬虫产生</p><h3 id="爬虫能做什么？"><a href="#爬虫能做什么？" class="headerlink" title="爬虫能做什么？"></a>爬虫能做什么？</h3><p>• 采集网络数据<br>• 自动化测试<br>• 做一些脱离手动的操作（帮人投票，12306抢票，微信聊天助手-itchat）<br>• 灰产业（薅羊毛，发起网络攻击，做水军）</p><h3 id="数据能做什么？"><a href="#数据能做什么？" class="headerlink" title="数据能做什么？"></a>数据能做什么？</h3><p>• 聚合产品（新闻网站，早期的今日头条）now自媒体<br>• 搜索引擎(百度，谷歌）<br>• 数据分析、人工智能的源数据<br>• 特定领域的数据服务（二手车估价、天气预报、团购、去哪儿网）</p><h3 id="学习爬虫需要的知识"><a href="#学习爬虫需要的知识" class="headerlink" title="学习爬虫需要的知识"></a>学习爬虫需要的知识</h3><p>• 计算机网络（http/https协议，tcp/ip协议，socket编程）<br>• 前端基础<br>• 正则表达式<br>• 数据存储技术（分布式存储）<br>• 并发处理技术（多线程，多进程，线程池，协程）<br>• 图像识别（处理反爬、验证码），机器学习算法（验证码、数据解析）</p><h3 id="爬虫中需要解决的问题"><a href="#爬虫中需要解决的问题" class="headerlink" title="爬虫中需要解决的问题"></a>爬虫中需要解决的问题</h3><p>• 爬虫的采集和更新策略<br>• 解决反爬<br>• 数据解析<br>• 数据存储<br>• 模拟登陆（验证码识别）反爬——了解互联网协议<br>• 爬虫的监控和部署<br>• 数据的去重（url去重，内容去重）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++回溯法</title>
      <link href="2021/0101undefined.html"/>
      <url>2021/0101undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-回溯法"><a href="#C-回溯法" class="headerlink" title="C++回溯法"></a>C++回溯法</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="DFS–图的深度优先遍历"><a href="#DFS–图的深度优先遍历" class="headerlink" title="DFS–图的深度优先遍历"></a>DFS–图的深度优先遍历</h3><p><strong>一条路走到黑</strong><br>①邻接矩阵：<br> 有通路则为1,无通路则0。稠密图数组visited[i]：辅助数组（初始化为0，若访问过则为1）<br> 每一个顶点都要从头扫描该顶点的所在行（时间复杂度O（n ^2））<br>②邻接表：<br> 存在2e个表结点，但只需扫描e个结点即可完成遍历，加上访问n个头结点的时间。<br> 时间复杂度O（n+e）稀疏图</p><h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><p>回溯法(探索与回溯法)是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为”回溯点”。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
